---
title: "DESAFIOS NA GERAÇÃO DE CÓDIGO EM LINGUAGENS PROPRIETÁRIAS: UM ESTUDO COM O MODELO LLAMA E UNIFACE"
date: last-modified
date-format: "DD/MM/YYYY"
authors:
  - name: Lucas Lucio
    affiliation: COAMO/UTFPR
format: 
    html:
        toc: true
        toc-depth: 2
        toc-expand: 2
        toc-location: right
        number-sections: true
        number-depth: 3
        embed-resources: true
        toc-title: Sumário
---

<style>body {text-align: justify;}</style>

# Sobre o Estudo

## Objetivo
  O objetivo é capacitar e validar um modelo prétreinado para atuar e responder a solicitações que utilizam uma linguagem ou ferramenta ainda
  não completamente conhecida por ele. No caso aqui apresentado, aplica-se à plataforma de
  desenvolvimento Uniface, que utiliza a linguagem ProcScript.

## Método
  Foi desenvolvido um sistema de Geração Aumentada de Recuperação (RAG) com o objetivo de processar e integrar documentação técnica e exemplos de código na linguagem da ferramenta Uniface (ProcScript). Esse sistema permitirá a consulta ao modelo de inteligência artificial Llama em sua versão 3.1, possibilitando a formulação de respostas para perguntas relacionadas à codificação em Uniface. Espera-se que o modelo seja capaz de utilizar o contexto da documentação fornecida para responder a questões de diferentes níveis de complexidade, desde conceitos introdutórios até mais avançados.

# Configurações Iniciais

  Para realizar as solicitações e geração dos códigos é necessário inicialmente executar uma instancia do modelo Llama em sua versão 3.1. Para isso siga as etapas descritas abaixo. 
  Toda a execução deste projeto requer utilizar uma versão de sistema operacional Linux (aqui utilizado o Debian 12). 

## Execução modelo Llama 3.1
  O modelo será instalado de forma simplificada utilizando a ferramenta Ollama, disponível em `https://ollama.com/`. 
  
  Para realizar a instalação utilize o comando:

  ```
    curl -fsSL https://ollama.com/install.sh | sh
  ```

  Após as instalação bem sucedida é necessário executar o modelo.

  Execute primeiro:
  
  ```
    ollama start
  ```

  E após o comando:
  
  ```
    ollama run llama3.1
  ```

  Desta forma teremos uma instância do modelo Llama 3.1 8b rodando localmente e com um chat executando via terminal. Nele é possível iniciar as solicitações. 

# Implementação do RAG
  A segunda etapa é a implementação do RAG que será utilizado para as solicitações. Nele será implementado todo o modelo de busca dentro dos arquivos imputados em uma base vetorial para a análise do modelo Llama. 

## Definições da linguagem de programação
  Para a codificação foi utilizado a linguagem de programação Python, por conta de sua facilidade e praticidade de implementar integrações com modelos LLM e ampla documentação e bibliotecas para este tipo de desenvolvimento. 

## Importação das bibliotecas
  Abaixo estão descritas as bibliotecas utilizadas para a codificação do RAG. 

```{python}
  from langchain.text_splitter import RecursiveCharacterTextSplitter
  from langchain_chroma import Chroma
  from langchain_ollama import OllamaEmbeddings
  from langchain_community.document_loaders import DirectoryLoader
  from langchain.chains import create_retrieval_chain
  from langchain.chains.combine_documents import create_stuff_documents_chain
  from langchain_ollama import ChatOllama
  from langchain_core.prompts import ChatPromptTemplate
  import os
  import nltk
```

  Grande parte do desenvolvimento utiliza da biblioteca Langchain, que facilita a integração com os modelos e execução de ferramentas para a criação e análise dos *embeddings*. Esta biblioteca biblioteca está disponível para acesso em `https://www.langchain.com/`.

```{python}
  #Baixando pacotes específicos do NLTK (Natural Language Toolkit)
  nltk.download('punkt_tab')
  nltk.download('averaged_perceptron_tagger_eng')
```

  A etapa acima é especifica para a incorporação de bibliotecas que será utilizadas para a tokenização e etiquetagem, usando a biblioteca NLTK. Estes são processos importantes durante o processamento de informações em um RAG.

## Definição do método RAG
  A codificação de um RAG não é complexa, basta uma função que realize as operações principais para que seja implementado todas as etapas. Abaixo é possível visualizar o método principal RAG e a definição de cada linha executada. 

```{python}
  def simple_rag(directory, question):
    # Inicializa o modelo de chat Ollama com o modelo "llama3"
    model = ChatOllama(model="llama3", )
    # Define o diretório de persistência para o banco de dados Chroma
    persistance_directory = "./chroma_db"

    if directory is not None:
        # Carrega documentos do diretório especificado
        docLoad = DirectoryLoader(directory, glob="**/*.pdf", show_progress=True).load()
        # Divide os documentos em pedaços menores
        text_splitter = RecursiveCharacterTextSplitter(chunk_size=400, chunk_overlap=100)
        splits = text_splitter.split_documents(docLoad)

        if os.path.exists(persistance_directory) and os.path.isdir(persistance_directory):
            # Carrega o banco de dados Chroma existente
            vectorstore = Chroma(persist_directory=persistance_directory, embedding_function=OllamaEmbeddings(model="llama3"))
        else:
            # Cria um novo banco de dados Chroma a partir dos documentos divididos
            vectorstore = Chroma.from_documents(documents=splits, embedding=OllamaEmbeddings(model="llama3"), persist_directory=persistance_directory)
    else:
        if os.path.exists(persistance_directory) and os.path.isdir(persistance_directory):
            # Carrega o banco de dados Chroma existente
            vectorstore = Chroma(persist_directory=persistance_directory, embedding_function=OllamaEmbeddings(model="llama3"))
        else:
            # Imprime uma mensagem de erro se nenhum diretório for fornecido e o banco de dados persistente não existir
            print("Nenhum diretório fornecido e a base de dados persistente não existe.")
            return

    # Configura o recuperador de documentos com base na similaridade
    retriever = vectorstore.as_retriever(search_type="similarity_score_threshold", search_kwargs={"k": 7, "score_threshold": 0.7})

    # Define o prompt do sistema para o modelo de chat
    system_prompt = (
        "Considere que você é um assistente de programação com foco em codificação para Uniface."
        "Use os seguintes pedaços de contexto recuperado para responder as solicitações realizadas."
        "Se não souber as respostas ou não conseguir gerar algum código para a solicitação diga que não é possível realizar a operação desejada."
        "\n\n"
        "{context}"
    )

    # Cria o template de prompt para o modelo de chat
    prompt = ChatPromptTemplate.from_messages(
        [
            ("system", system_prompt),
            ("human", "{input}")
        ]
    )

    # Cria a cadeia de perguntas e respostas usando o modelo e o prompt
    question_answer_chain = create_stuff_documents_chain(model, prompt)
    # Cria a cadeia de recuperação usando o recuperador e a cadeia de perguntas e respostas
    rag_chain = create_retrieval_chain(retriever, question_answer_chain)

    # Invoca a cadeia de recuperação com a pergunta fornecida
    response = rag_chain.invoke({"input": question})
    response["answer"]

    # Imprime a resposta obtida
    print("================== RESPONSE ==================")
    print(response["answer"])
    print("================ END RESPONSE ================")

```

#### Configurações importantes para o RAG

  Model
  : Refere-se ao modelo de linguagem que está sendo utilizado para gerar respostas. No caso aplicado aqui está sendo utilizado o Llama 3.1, mas pode ser utilizado outros modelos compativeis com as biblitecas disponíveis. Considerando que será necessário alteração de código para execução em um modelo diferente ao proposto. 

  Chunk Size
  : Refere-se ao modelo de linguagem que está sendo utilizado para gerar respostas. Os documentos inseridos para o RAG são divididos em pedaços menores para facilitar a indexação e a recuperação de informações relevantes. O tamanho do chunk pode afetar a precisão e a eficiência da recuperação.

  Chunk Overlap
  : Quantidade de sobreposição entre os chunks.Esta sobreposição pode ajudar a garantir que informações importantes que estão no limite entre dois chunks não sejam perdidas.


  Search Type
  : Tipo de busca que está sendo realizada. Se refere ao algoritmo ou método específico usado para recuperar informações do banco de dados.

  Search Kwargs
  : Argumentos adicionais (keyword arguments) passados para a função de busca. incluem parâmetros como filtros, limites de resultados, para ajustar o comportamento da busca.

  System Prompt
  : Prompt do sistema usado como auxílio de linguagem na geração de respostas. Inclui instruções específicas ou contexto adicional para ajudar o modelo a produzir respostas precisas e relevantes.

  > Todos os valores utilizados no modelo proposto podem ser alternados para uma melhor adaptação a necessidade do qual o RAG estará sendo aplicado. 

### Método de execução
  A definição do método chamado `main` para a execução do RAG serve apenas para as trativas de *input* dos documentos de contexto para a aplicação e do questionamento a ser feito ao modelo. 

```{python}
def main():
  # Solicita ao usuário se deseja carregar os documentos de análise
  loadDocs = input("Deseja carregar os documentos de análise? (s/n): \n")

  # Verifica se o usuário deseja carregar os documentos
  if(loadDocs == 's'):
      # Solicita ao usuário o caminho para os documentos de análise
      directory = input("Caminho para os docs de análise: \n")
  else:
      # Define o diretório como None se o usuário não quiser carregar os documentos
      directory = None
  
  # Solicita ao usuário que digite sua pergunta
  question = input("Digite sua pergunta: \n")

  # Chama a função simple_rag passando o diretório e a pergunta como argumentos
  simple_rag(directory, question)

```
## Execução 
  Para a execução do código e apenas necessário executar o arquivo `.py` em que ele está contido e realizar as inserções de dados via terminal quando questionado. Sequindo sempte a ordem dos questionamentos

1. Se deseja carregar algum documento.
  i) Caso positivo, informar o local dos documentos
2. Dúvida aplicada ao modelo com contextualização dos documentos inseridos anteriormente ao RAG.

## Aplicação ao modelo

  A aplicação divide as questões em três grandes blocos, cada um correspondente a um nível de complexidade. Para cada bloco, foram fornecidos ao modelo arquivos específicos de documentação, extraídos do site disponibilizado pela proprietária da ferramenta, Rocket Software. Esses arquivos servem como referência para consultas sobre Uniface, estando disponíveis em `https://docs.rocketsoftware.com/`.

  Para cada bloco de questão foram criados, ao todo, três casos de aplicação aos modelos. Dois desses casos serão
  baseados em modelos modificados (RAG e *few-shot learning*), nos quais foram aplicadas técnicas para aprendizado posterior de conteúdo, enquanto o terceiro será o modelo original, sem alterações (zero-shot learning). Para cada um desses modelos, as atividades previamente definidas serão aplicadas, e as respectivas respostas serão coletadas para análise subsequente.

### Questão de nível inicial

  A atividade de nível inicial é composta por operações aprendidas na introdução à programação. 
  Para sintetizar os conceitos iniciais de desenvolvimento com ProcScript, foi solicitada uma função básica contendo apenas estruturas elementares de codificação, como operadores
  matemáticos, condicionais e manipulação de strings. A atividade que aplica esses conceitos é a validação de CPF. Nesse caso, o modelo foi submetido a gerar uma função que realize
  a análise de um CPF utilizando operações matemáticas aplicadas aos números extraídos da string que contém o CPF e verificar, com estruturas condicionais, as regras para retornar um
  valor booleano indicando se o CPF é válido ou não.

#### Aplicação ao modelo com *zero-shot learning*
  Para este modelo foi realizado o *input* apenas da questão com um prompt, contendo no prompt apenas os seguintes itens:

* Solicitação com a necessidade de validação do CPF
* Regras para a validação do CPF
* Definição de entradas e saídas necessárias ao código gerado

Após isso foi coletado a resposta do modelo, não havendo nenhum tipo de tratamento sobre o retorno realizado pelo modelo. Sendo que a solikcitação foi feita pelo próprio terminal em que o modelo habilita para realizar a solicitação.

#### Prompt informado
   
   ```
   Em Uniface utilizando ProcScript como linguagem de programação, crie uma operation que valide um CPF. 
   Deve receber uma string como parâmetro de entrada contendo o CPF sem formatação e é necessário que a operação retorne um booleano indicando se é um CPF válido. 
   Sendo os valores possíveis, verdadeiro para um CPF válido e falso para um inválido.

   As regras de validação de um CPF são as descritas abaixo:

   Para se validar um CPF se calcula o primeiro dígito verificador a partir dos 9 primeiros dígitos do CPF.
   Em seguida, calcula o segundo dígito verificador a partir dos 10 primeiros dígitos do CPF incluindo o primeiro dígito, obtido na primeira parte.

   Como calcular o primeiro dígito:

      Separar os primeiros 9 dígitos do CPF e multiplicar cada um dos números, 
      desde o primeiro até o nono número, inciar a multiplicação do primeiro em 10 e decrescer em 1 o multiplicador a cada dígito seguinte. 
      Somar todos os resultados obtidos nas multiplicações e dividir por 11 e considerar como quociente apenas o valor inteiro.
      Considere o resto da divisão para obter o resultado do dígito. 
         - Se for menor que 2, então o dígito é igual a 0 (Zero).
         - Se for maior ou igual a 2, então o dígito é igual a 11 menos o próprio resto da divisão.

   Como calcular o segundo dígito:

   Para  calcular o segundo dígito vamos usar o primeiro digito já calculado. 
   Vamos montar a mesma tabela de multiplicação usada no cálculo do primeiro dígito. 
   Só que desta vez usaremos na segunda linha os valores 11,10,9,8,7,6,5,4,3,2 já que estamos incluindo mais um digito no cálculo(o primeiro dígito calculado):

      O calculo é semelhante ao do primeiro dígito, a diferença neste caso é que são 10 dígitos a serem multiplicados, incluindo o primeiro verificador. 
      Para multiplicar se inicia em 11 como multiplicador do primeiro número e segue decrescendo até o décimo número. 
      Somar todos os resultados obtidos nas multiplicações e dividir por 11 e considerar como quociente apenas o valor inteiro.
      Considere o resto da divisão para obter o resultado do dígito. 
         - Se for menor que 2, então o dígito é igual a 0 (Zero).
         - Se for maior ou igual a 2, então o dígito é igual a 11 menos o próprio resto da divisão.

   após obter os dois últimos dígitos é necessário verificar se eles são iguais ao informado no CPF de entrada.
```

#### Resposta obtida
```
OPERACAO validar_cpf
  IN string cpf_sem_formatacao
  OUT boolean cpf_válido

  // Separa os primeiros 9 dígitos do CPF
  integer primeiro_nove_digitos = substring(cpf_sem_formatacao, 1, 9)

  // Calcula o primeiro dígito verificador
  integer multiplicador = 10
  integer soma_multiplicacoes = 0
  for i = 1 to 9
    integer digito_atual = int(substring(primeiro_nove_digitos, i, 1))
    soma_multiplicacoes = soma_multiplicacoes + (digito_atual * multiplicador)
    multiplicador = decrementar_multiplicador(multiplicador)
  endfor

  integer quociente_primeiro_digito = ceil(soma_multiplicacoes / 11)
  integer resto_primeiro_digito = modulo(soma_multiplicacoes, 11)

  if (resto_primeiro_digito < 2) then
    primeiro_digito_verificador = 0
  else
    primeiro_digito_verificador = 11 - resto_primeiro_digito
  endif

  // Calcula o segundo dígito verificador
  integer multiplicador_segundo_digito = 11
  integer soma_multiplicacoes_segundo_digito = 0
  for i = 1 to 10
    integer digito_atual = int(substring(cpf_sem_formatacao, i, 1))
    if (i = 1) then
      // Inclui o primeiro dígito verificador no cálculo do segundo dígito
      digito_atual = int(substring(cpf_sem_formatacao, 10, 1)) * multiplicador_segundo_digito
    endif
    soma_multiplicacoes_segundo_digito = soma_multiplicacoes_segundo_digito + digito_atual
    multiplicador_segundo_digito = decrementar_multiplicador(multiplicador_segundo_digito)
  endfor

  integer quociente_segundo_digito = ceil(soma_multiplicacoes_segundo_digito / 11)
  integer resto_segundo_digito = modulo(soma_multiplicacoes_segundo_digito, 11)

  if (resto_segundo_digito < 2) then
    segundo_digito_verificador = 0
  else
    segundo_digito_verificador = 11 - resto_segundo_digito
  endif

  // Verifica se os dois últimos dígitos do CPF são iguais ao informado na entrada
  if (substring(cpf_sem_formatacao, len(cpf_sem_formatacao) - 1, 2) = str(ultimo_digito_verificador)) then
    cpf_válido = .T.
  else
    cpf_válido = .F.
  endif

END OPERACAO

Este código define uma operação chamada `validar_cpf` que recebe um CPF como entrada e retorna um valor lógico indicando se o CPF é válido ou não.

A operação começa separando os primeiros 9 dígitos do CPF e calcula o primeiro dígito verificador utilizando a fórmula descrita no problema. Em seguida, calcula o 
segundo dígito verificador incluindo o primeiro dígito verificado no cálculo.

Finalmente, verifica se os dois últimos dígitos do CPF são iguais ao informado na entrada e retorna um valor lógico indicando se o CPF é válido ou não.
```

#### Análise Isolada

  Ao realizar uma análise apenas da resposta obtida neste caso de aplicação, sem considerar os casos de aplicação posterior, é possível notar os seguintes pontos:

1. O modelo foi capaz de abstrair as regras referentes a validação de um CPF, porém a aplicação a linguagem foi problemática
2. A definição de entradas e saídas da operação ocorreu de forma parcialmente correta, mas novamente a aplicação a sintaxe da linguagem não foi bem sucedida, desta vez aproximado do resultado ideal com os casos de `IN` e `OUT`, mas posicionados de forma errada na codificação.
3. Definições de variáveis foram feitas de forma errada, e com a declaração dos tipos também sem nenhuma relação com o que realmente é aplicável. 
4. Aplicações de casos onde se utilizaram condicionais `if` foram realizadas da forma parcialmente correta, porem a utilização do `then` está errada. 
5. Definição de início e fim da operação indcorreta, por estar utilizando termos em portugês. 
6. Comentários em código errados, utilizando `\\` ao invés de `;` que é o correto para a linguagem. 
7. Alucinação e criação de fuçõies nativas da linguagem que não existem, um exemplo é o `str()`. 


#### Aplicação ao modelo com *few-shot learning*
  Para este modelo foi realizado o *input* da solicitação somente após uma leva de outros *inputs* para apresentar exemplos isolados de como realizar operações necessárias para a solução do problema principal. Todos os casos de exemplos aplicadso foram passados via terminal durante a conversação com o modelo, sendo que nenhum deles tem relação explicita com a solução esperada para o problema principal. Para cada exemplo aplicado foi coletado a resposta do modelo após o *input*, e documentado. Apenas no final foi realizado a questão principal com um prompt, contendo no apenas os seguintes itens:

* Solicitação com a necessidade de validação do CPF
* Regras para a validação do CPF
* Definição de entradas e saídas necessárias ao código gerado

Após isso foi coletado a resposta do modelo, não havendo nenhum tipo de tratamento sobre o retorno realizado pelo modelo. 

####  Prompts de exemplos informados

1. Inicial de apresentação
```
================= INPUT =================

   Considere que é um assistente de codificação em uniface, irei informar alguns exemplos de código em ProcScript após finalizar os exemplos codifique a solicitação realizada.

   ================= RESPOSTA  =================
   
      Entendi! Estou aqui para ajudá-lo. Por favor, forneça os exemplos de código em ProcScript que você deseja compartilhar e finalize-os. Então, farei o meu trabalho de 
      codificar a solicitação realizada. Estou pronto quando você estiver!

```

2. Exemplo de *operation*
```
================= INPUT =================

   Abaixo temos um exemplo de como codifica uma operação:

      operation DISCOUNT
         params
         string CUSTID : IN
         numeric AMOUNT : INOUT
         numeric PERCENTAGE : OUT
         endparams
         ; no discount till proven otherwise
         ; 20% discount for Uniface
         ; 15% discount for Acme
         ; adjust amount
         PERCENTAGE = 0
         if ( CUSTID == "ufbv" ) PERCENTAGE = 20
         if ( CUSTID == "acme" ) PERCENTAGE = 15
         AMOUNT = AMOUNT * ( 100 - PERCENTAGE) / 100
      end

    ================= RESPOSTA  =================

      O código que você forneceu é uma operação em ProcScript para aplicar descontos. Vou resumir rapidamente o que acontece:

      * A operação `DISCOUNT` tem três parâmetros:
            + `CUSTID`: um string que é passado como parâmetro de entrada (IN).
            + `AMOUNT`: um valor numérico que é passado como parâmetro de entrada e saída (INOUT). Isso significa que o valor pode ser alterado pela operação.
            + `PERCENTAGE`: um valor numérico que é passado como parâmetro de saída (OUT).
      * A operação começa com uma sentença que assume que não há desconto até que contrário seja provado.
      * Em seguida, há algumas regras para aplicar descontos:
            + Se o cliente for "ufbv", um desconto de 20% é aplicado.
            + Se o cliente for "acme", um desconto de 15% é aplicado.
      * Por fim, a operação ajusta o valor do `AMOUNT` multiplicando-o pelo fator de conversão para calcular o valor após o desconto.

      Agora, estou pronto para codificar outras solicitações realizadas. Qual é o próximo exemplo?


```

3. Exemplo de condicional
```
================= INPUT =================

   Abaixo temos um exemplo de como codifica um condicional:

       if (INVDATE != $next(INVDATE)) ; if next invoice date different
         printbreak "SUBTOTAL" ; print "SUBTOTAL" break frame
         AMOUNT.SUBTOTAL = 0 ; set subtotal to 0
         eject ; start printing on next page
      else
         skip ; print next line empty
      endif

   ================= RESPOSTA  =================
     
     Excelente! O código que você forneceu é um exemplo de como utilizar um condicional (`if`) em ProcScript para controlar o fluxo do programa.

      Vou resumir rapidamente o que acontece:

      * A condição `if` verifica se a data da próxima fatura (`INVDATE`) é diferente da data atual (`$next(INVDATE)`).
      * Se a condição for verdadeira (i.e., a data da próxima fatura é diferente), então:
            + Printa um "SUBTOTAL" com um frame de quebra (`printbreak`).
            + Define o subtotal para zero (`AMOUNT.SUBTOTAL = 0`).
            + Ejetona o fluxo do programa, começando a imprimir na próxima página (`eject`).
      * Se a condição for falsa (i.e., a data da próxima fatura é igual à atual), então:
            + Pula uma linha vazia (`skip`).

      Em outras palavras, este código verifica se há mudanças nas datas de fatura e, se houver, começa a imprimir na próxima página. Se não houver mudanças, pula uma linha 
      vazia.

      Pronto para o próximo exemplo!

```

4. Exemplo de *replace*
```
================= INPUT =================

   Abaixo temos um exemplo de como codifica um replace:

      vReplaced = $replace("a should be uppercase", 1, "a", "A", -1)

   ================= RESPOSTA  =================

      O código que você forneceu é um exemplo de como utilizar a função `$replace` em ProcScript para substituir uma parte de uma string.

      Vou resumir rapidamente o que acontece:

      * A função `$replace` replace ("a should be uppercase") é chamada com dois parâmetros:
            + O primeiro parâmetro é a string original ("a should be uppercase").
            + O segundo parâmetro é um par de strings, onde o primeiro elemento é a parte da string que se deseja substituir ("a"), e o segundo elemento é o valor de substituição 

      ("A"). O `1` indica que a substituição deve ocorrer apenas na primeira ocorrência da string original.
            + O `-1` indica que a substituição não deve ter um limite, ou seja, a substituição será feita em todas as ocorrências.

      Portanto, o resultado do código `$replace("a should be uppercase", 1, "a", "A", -1)` seria `"A Should Be Uppercase"`.

      Pronto para o próximo exemplo!
```

5. Exemplo de *length*
```
================= INPUT =================

   Abaixo temos um exemplo de como obtem o tamaho de uma string: 

      strlength = $length(str1)

   ================= RESPOSTA  =================

      O código que você forneceu é um exemplo de como utilizar a função `$length` em ProcScript para obter a quantidade de caracteres (ou tamanho) de uma string.

      Vou resumir rapidamente o que acontece:

      * A função `$length` é chamada com um parâmetro, que é a string (`str1`) cujo tamanho se deseja determinar.
      * O resultado da função `$length` é armazenado na variável `strlength`.

      Portanto, o código `$length(str1)` retorna o tamanho (ou comprimento) da string `str1`, que pode ser utilizado em sequências subsequentes do programa.

      Pronto para o próximo exemplo!

```


6. Exemplo de como separar um caractere de uma string
```
================= INPUT =================

   Abaixo temos um exemplo de como separar um caractere de uma string:
      vchar = vString[8:1]

   ================= RESPOSTA  =================

      O código que você forneceu é um exemplo de como utilizar a sintaxe de acesso à string em ProcScript para obter um caractere específico de uma string.

      Vou resumir rapidamente o que acontece:

      * A variável `vchar` está sendo setada com o valor do caractere na posição 8 da string `vString`, começando a contar desde 1 (não 0).
      * O `[8:1]` é uma sintaxe de acesso à string que especifica o índice inicial e final da substring que se deseja obter. Nesse caso, estamos obtendo apenas um caractere, 
      portanto, o índice final não é necessário.
      * O resultado é o caractere na posição 8 da string `vString`, que é armazenado na variável `vchar`.

      Em outras palavras, este código está "puxando" o caractere na posição 8 da string `vString` e atribuindo-o à variável `vchar`.


```


7. Exemplo de *for*
```
================= INPUT =================

   Abaixo temos um exemplo de como fazer um laço de repetição "for" em ProcScript: 
      variables
         numeric vCounter
         numeric vLoops
      endvariables

      vLoops = 0
      for vCounter = 100 to 0 step -2
         vLoops += 1 
         putmess "Counter: %%vCounter, Loop count: %%vLoops "
         if (vLoops >= 6) 
            putmess "Loop processing stopped" 
            break
         endif
       endfor

   ================= RESPOSTA  =================
      O código que você forneceu é um exemplo de como utilizar o laço de repetição `for` em ProcScript para iterar sobre uma sequência de valores.

      Vou resumir rapidamente o que acontece:

      * As variáveis `vCounter` e `vLoops` são declaradas e inicializadas.
      * O laço `for` é iniciado com a seguinte sintaxe:
            + `vCounter = 100 to 0 step -2`: define a condição do laço. Nesse caso, o contador (`vCounter`) começa em 100 e decremente de 2 até atingir 0.
            + O corpo do laço é executado enquanto a condição for verdadeira.
      * Dentro do laço:
            + A variável `vLoops` é incrementada em 1 com cada iteração (`vLoops += 1`).
            + Uma mensagem é impressa na tela usando o comando `putmess`, mostrando o valor atual de `vCounter` e a contagem de loops.
            + Se a contagem de loops atinge ou ultrapassa 6, uma mensagem é impressa indicando que o processamento de loop foi interrompido (`Loop processing stopped`) e o laço é 

      parado com o comando `break`.

      Em resumo, este código executa um laço `for` que decrementa o valor de `vCounter` em 2 até atingir 0, impresso a contagem de loops e parando quando a contagem atinge ou 
      ultrapassa 6.


```


8. Exemplo de *while*
```
================= INPUT =================

   Abaixo temos um exemplo de como fazer um laço de repetição "while" em ProcScript: 
   while (FIELD.ENT != vValue) & ($status >= 0)
      do something
   endwhile

   ================= RESPOSTA  =================
      O código que você forneceu é um exemplo de como utilizar o laço de repetição `while` em ProcScript para iterar enquanto uma condição seja verdadeira.

      Vou resumir rapidamente o que acontece:

      * O laço `while` é iniciado com a seguinte sintaxe:
            + `(FIELD.ENT != vValue) & ($status >= 0)` é a condição do laço. A condição será verdadeira enquanto o valor de `FIELD.ENT` for diferente de `vValue` e o status (`$sta

      (`$status`) for maior ou igual a 0.
      * O corpo do laço é executado enquanto a condição for verdadeira.
      * Dentro do laço, você pode colocar qualquer código que deseje executar enquanto a condição for verdadeira. No exemplo, está sendo mostrada uma variável `do something`, 
      que representa o código que será executado.
      * O laço termina quando a condição não é mais verdadeira (ou seja, quando `FIELD.ENT` for igual a `vValue` ou `$status` seja menor que 0).

      Em resumo, este código executa um laço `while` que itera enquanto o valor de `FIELD.ENT` for diferente de `vValue` e o status for maior ou igual a 0.

```

#### Prompt final informado

```
 Em Uniface utilizando ProcScript como linguagem de programação, crie uma operação que valide um CPF. 
   Deve receber uma string como parâmetro de entrada contendo o CPF sem formatação e é necessário que a operação retorne um booleano indicando se é um CPF válido. 
   Sendo os valores possíveis, verdadeiro para um CPF válido e falso para um inválido.

   As regras de Validação de um CPF são as descritas abaixo:

   Para se validar um CPF se calcula o primeiro dígito verificador a partir dos 9 primeiros dígitos do CPF.
   Em seguida, calcula o segundo dígito verificador a partir dos 10 primeiros dígitos do CPF incluindo o primeiro dígito, obtido na primeira parte.

   Como calcular o primeiro dígito:

      Separar os primeiros 9 dígitos do CPF e multiplicar cada um dos números, 
      desde o primeiro até o nono número, inciar a multiplicação do primeiro em 10 e decrescer em 1 o multiplicador a cada dígiTo seguinte. 
      Somar todos os resultados obtidos nas multiplicações e dividir por 11 e considerar como quociente apenas o valor inteiro.
      Considere o resto da divisão para Obter o resultado do dígito. 
         - Se for menor que 2, então o dígito é igual a 0 (Zero).
         - Se for maior ou igual a 2, então o dígito é igual a 11 menos o próprio resto da divisão.

   Como calcular o segundo dígito:

   Para  calcular o segundo dígito vamos usar o primeiro digito já calculado. 
   Vamos montar a mesma tabela de multiplicação usada no cálculo do primeiro dígito. 
   Só que desta vez usaremos na segunda linha os valores 11,10,9,8,7,6,5,4,3,2 já que estamos incluindo mais um digito no cálculo(o primeiro dígito calculado):

      O calculo é semelhante ao do primeiro dígito, a diferença neste caso é que são 10 dígitos a serem multiplicados, incluindo o primeiro verificador. 
      Para multiplicar se inicia em 11 como multiplicador do primeiro número e segue decrescendo até o décimo número. 
      Somar todos os resultados obtidos nas multiplicações e dividir por 11 e considerar como quociente apenas o valor inteiro.
      Considere o resto da divisão para Obter o resultado do dígito. 
         - Se for menor que 2, então o dígito é igual a 0 (Zero).
         - Se for maior ou igual a 2, então o dígito é igual a 11 menos o próprio resto da divisão.

   após obter os dois últimos dígitos é necessário verificar se eles são iguais ao informado no CPF de entrada.

```

#### Resposta obtida

```
  Aqui está um exemplo de como você pode criar uma operação em ProcScript para validar um CPF em Uniface:
      proc validate_cpf(vcpf_string)

         local vcpf_num, vfirst_digit, vsecond_digit, vsum1, vsum2

         // Convertir stirng para número
         vcpf_num = $conv_to_number(vcpf_string)

         // Calcula o primeiro dígito verificador
         vsum1 = 0
         do i = 1 to 9
            vsum1 = vsum1 + (i * ($digit(vcpf_num, i - 1)) % 10)
         enddo

         vfirst_digit = 0
         if vsum1 >= 11 then
            vfirst_digit = 11 - (vsum1 % 11)
         else
            vfirst_digit = 0
         fi

         // Calcula o segundo dígito verificador
         vsum2 = 0
         do i = 10 to 1
            vsum2 = vsum2 + (i mod 11) * ($digit(vcpf_num, i - 1))
         enddo

         vsecond_digit = 0
         if vsum2 >= 11 then
            vsecond_digit = 11 - (vsum2 % 11)
         else
            vsecond_digit = 0
         fi

         // Verifica se os dígitos são iguais ao informado no CPF de entrada
         if $conv_to_number(vcpf_string) == ($conv_to_number(vcpf_string) * 10 + vfirst_digit) * 10 + vsecond_digit then
            return true
         else
            return false
         fi

      end proc

      Este procedimento assume que o CPF é uma string com 11 caracteres (os 9 primeiros dígitos e os 2 últimos dígitos verificadores). Ele converte a string para um número, 
      calcula o primeiro dígito verificador utilizando as regras descritas e, em seguida, calcula o segundo dígito verificador. Por fim, ele verifica se os dois últimos 
      dígitos são iguais ao informado no CPF de entrada.

      Para usar este procedimento em Uniface, você pode chamar-o passando a string do CPF como parâmetro, por exemplo:
      
      local vcpf_string = "12345678900"
      if validate_cpf(vcpf_string) then
         print "CPF válido!"
      else
         print "CPF inválido!"
      fi
```
#### Análise Isolada
  No caso da resposta isolada foram analisados os pontos:

  1. A modelo pareceu não interpretar as regras sobre validação de CPF de forma tão completa, mas apresentou uma solução mais optimizada, indepentende da aplicação correta das sintaxes. 
  2. Falhou na abertura e fechamento da operação, com relação ao `proc` que não existe.
  Criou funções nativas que não existem como por exemplo `$conv_to_number(vcpf_string)`
  3. plicou os laçoes de repetições de forma errada e fora da sintaxe como o caso do `do` e `enddo`
  4. Não tratou corretamente os casos de entradas e sapídas, falhando de forma extrema na aplicação da necessidade estabelecida pelo *input*
  5. Falhou na criação dos condicionais, aparentando possuir falhas de escrita como o caso do `if` onde foi inserido `fi`
  6. Tratou de forma errada os tipos de variáveis e a forma de atuação da linguagem quanto a elas.


#### Aplicação ao modelo com RAG

Para este caso foi aplicado a solicitação principal após a inserção de arquivos PDF da documentação do Uniface. Para a seleção destes arquivos foi considerado uma gama maior de intruções sobre determinados temas que seriam relevantes para a codificação proposta ao modelo. Todas as documentações foram extraidas no formato PDF disponível para download no prórpio site da documenteção da ferramenta. Para cada tópico ou estrutura a ser enviada ao RAG foi selecionado extraido um PDF, não sendo aplicado apenas um arquivo com toda a documentação. 

Os assuntos passados para este primeiro caso de solicitação foram:

* Operation
* Operadores
* Parâmetros
* Operadores relacionais
* Variáveis
* Retorno de *status*
* Retornos
* Operadoes de acesso em *struct*
* Operadores aritiméticos 
* Condicionais
* Conversões
* Tipagem de dados
* Extrações de valores em *string*
* Repetições `for`
* Repetições `while`
* Tamanho de *strings*
* Trim em *string*
* Replace em *string*
* Condicionais `if`
* Consdicionais `case`

Após o processamento dos PDF's para compor a base do RAG, foi relaizado a solicitação ao modelo para a obtenção de sua resposta. 


#### Prompt informado

```
   Em Uniface utilizando ProcScript como linguagem de programação, crie uma operação que valide um CPF. 
   Deve receber uma string como parâmetro de entrada contendo o CPF sem formatação e é necessário que a operação retorne um booleano indicando se é um CPF válido. 
   Sendo os valores possíveis, verdadeiro para um CPF válido e falso para um inválido.

   As regras de validação de um CPF são as descritas abaixo:

   Para se validar um CPF se calcula o primeiro dígito verificador a partir dos 9 primeiros dígitos do CPF.
   Em seguida, calcula o segundo dígito verificador a partir dos 10 primeiros dígitos do CPF incluindo o primeiro dígito, obtido na primeira parte.

   Como calcular o primeiro dígito:

      Separar os primeiros 9 dígitos do CPF e multiplicar cada um dos números, 
      desde o primeiro até o nono número, inciar a multiplicação do primeiro em 10 e decrescer em 1 o multiplicador a cada dígito seguinte. 
      Somar todos os resultados obtidos nas multiplicações e dividir por 11 e considerar como quociente apenas o valor inteiro.
      Considere o resto da divisão para obter o resultado do dígito. 
         - Se for menor que 2, então o dígito é igual a 0 (Zero).
         - Se for maior ou igual a 2, então o dígito é igual a 11 menos o próprio resto da divisão.

   Como calcular o segundo dígito:

   Para  calcular o segundo dígito vamos usar o primeiro digito já calculado. 
   Vamos montar a mesma tabela de multiplicação usada no cálculo do primeiro dígito. 
   Só que desta vez usaremos na segunda linha os valores 11,10,9,8,7,6,5,4,3,2 já que estamos incluindo mais um digito no cálculo(o primeiro dígito calculado):

      O calculo é semelhante ao do primeiro dígito, a diferença neste caso é que são 10 dígitos a serem multiplicados, incluindo o primeiro verificador. 
      Para multiplicar se inicia em 11 como multiplicador do primeiro número e segue decrescendo até o décimo número. 
      Somar todos os resultados obtidos nas multiplicações e dividir por 11 e considerar como quociente apenas o valor inteiro.
      Considere o resto da divisão para obter o resultado do dígito. 
         - Se for menor que 2, então o dígito é igual a 0 (Zero).
         - Se for maior ou igual a 2, então o dígito é igual a 11 menos o próprio resto da divisão.

   após obter os dois últimos dígitos é necessário verificar se eles são iguais ao informado no CPF de entrada.
```

#### Resposta obtida


#### Análise isolada

## Passo 2 do estudo

## Passo 3 do estudo

## ....

## Conclusão

Uma conclusão, que pode ser complexa caso o estudo seja 
