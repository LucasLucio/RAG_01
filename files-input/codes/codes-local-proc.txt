;Local Proc Básica
entry plExemploSoma
	params ;Parâmetros de entrada e saída 
		;Tipo parâmetro - NomeParâmetro - Definição de entrada ou saída
		numeric pNrPrimeiro     : IN
		numeric pNrSegundo      : IN
		numeric pNrResultado    : OUT
		$t_ds_erro$	            : OUT
	endParams

	pNrResultado = pNrPrimeiro + pNrSegundo

	;Tratamento de erro 
	if ($status < 0)
		$t_ds_erro$ = "Falha ao somar números"
		;Retorna com Falha
		return(-99)
	endIf
	
	;Retorna Local Proc com sucesso
	return(0)

end

;Local Proc basica com variáveis
entry plExemploNumeroMaior
	params ;Parâmetros de entrada e saída 
		;Tipo parâmetro - NomeParâmetro - Definição de entrada ou saída
		numeric pNrPrimeiro     : IN
		numeric pNrSegundo      : IN
		string  pStrResultado   : OUT
		$t_ds_erro$	            : OUT
	endParams
	variables
		string vStrResultado
	endvariables

	;Trata entradas
	if(pNrPrimeiro = "" | pNrSegundo = "")
		$t_ds_erro$ = "É necessário informar os valores"
		;Retorna com Falha
		return(-99)
	endif
	
	if(pNrPrimeiro = pNrSegundo)
		vStrResultado = "Os números são iguais"
	endif

	if(pNrPrimeiro > pNrSegundo)
		vStrResultado = "O numero %%pNrPrimeiro%%% é maior"
	else
		vStrResultado = "O numero %%pNrSegundo%%% é maior"
	endif

	;Atribui saída
	pStrResultado = vStrResultado

	
	;Retorna Local Proc com sucesso
	return(0)

end

;Local Proc que chama outras operation em componentes distintos
entry plSincronizarSolicitacoes
	params
		$t_ds_erro$        : OUT
	endparams
	variables
		struct vStcOportunidades
		string vStrContextoErro
		boolean vInComparacaoAtiva
	endvariables

	;Configurações iniciais para tratamentos de erro
	vStrContextoErro = "(%%$componentname%%%.sincronizarSolicitacoes)"
	$t_cd_operador$ = 1
	
	;Chama operation em componente CTRAO056
	activate "CTRAO056".buscaSolicitacoes(1, $datim, vStcOportunidades, $t_ds_erro$)
	;Tratamento de erro
	if ($status < 0)
		if ($status != <G_ERROEXEC>)
			call PL_ERRO_CMDMSG ($procerrorcontext)
		else
			$t_ds_erro$ = "%%$t_ds_erro$%%% %%vStrContextoErro%%%"
		endif

		return (<G_ERROEXEC>)
	endif

	;Chama operation em componente LFREO050
	activate "LFREO050".opBuscarValorChaveComparacao(vInComparacaoAtiva)
	if (vInComparacaoAtiva)
		;Chamada de função local do próprio componente
		call plProcessarComComparacao(vStcOportunidades)
	else
		;Chamada de função local do próprio componente
		call plProcessarSemComparacao(vStcOportunidades)
	endif
	return (0)
end

;Local Proc com condicional
entry plConsultaCredenciais
	params
		struct pStcCredencial : OUT
	endparams

	;Inicializa uma struct para armazenar resultado de saida
	pStcCredencial = $newstruct

	;Realiza condicional if, para avaliar o ambiente na constante do nome database e retornar o valor
	if (<NOME_DATABASE> = "PRODUCAO")
		pStcCredencial->ci = "dce3e984-c73a-4f02-a256-400675e292e4"
		pStcCredencial->cs = "CS-EXEMPLO"
	elseif (<NOME_DATABASE> = "TREINAMENTO") 
		pStcCredencial->ci = "dce3e984-c73a-4f02-a256-400675e292e4"
		pStcCredencial->cs = "CS-EXEMPLO"
	elseif (<NOME_DATABASE> = "DESENVOLVIMENTO")
		pStcCredencial->ci = "dce3e984-c73a-4f02-a256-400675e292e4"
		pStcCredencial->cs = "CS-EXEMPLO"
	endif

	return (0)
end

;Local Proc com consulta em operation de outro componente
entry plBuscaFilaExecucao
	params;Parâmetros de entrada e saída 
		;Tipo parâmetro - NomeParâmetro - Definição de entrada ou saída
		numeric p_nr_fila :out
		$t_ds_erro$ :out
	endparams
	variables ;Variáveis da Local Proc
		string vDsContexto, v_ls_param, v_nr_lancamento
	endvariables
	
 	;Configurações iniciais para tratamentos de erro
	vDsContexto = "<$componentname>.plBuscaFilaExecucao"

	;Criação de lista para passagem de parâmetros da lista que usa entrada em listas
	putitem/id v_ls_param, "tp_sequencia", "LFRE_SB"
	
	;Chamada de uma operation em outro componente
	activate "GSISO037".OBTEM_FIELD_PK_SERRO("GSIS_NUMSEQ", v_ls_param, "nr_lancamento", "", v_nr_lancamento, $t_ds_erro$)
	;Tratamento de erro
	if ($status < 0)
		$t_ds_erro$ = "%%$t_ds_erro$%%% - (%%vDsContexto)"
		return <g_erroExec> ;Retorno do erro
	endif 

	;Tratamento para resultado de saída
	p_nr_fila = v_nr_lancamento
	
	;Retorno da operation com sucesso
	return(0)
end 

;Local Proc com condicional switch/case
entry plCredenciaisFila
	params ;Parâmetros de entrada e saída 
		;Tipo parâmetro - NomeParâmetro - Definição de entrada ou saída
		string pNomeFila      :IN
		struct pStcCredencial : OUT
	endparams
	variables ;Variáveis da Local Proc
		string  vFila, vNamespace
		numeric vNrFila
	endvariables

	;Switch/Case para aplicação da regra de retorno
	selectcase pNomeFila
		case "municipio"
			vFila = "sbq-municipio"
		case "uf"
			vFila = "sbq-uf"
		case "pais"
			vFila = "sbq-pais"
		case "transportadora"
			vFila = "sbq-transportadora"
		case "oportunidade"
			vFila = "sbq-oportunidade"
		case "tipo-veiculo"
			vFila = "sbq-tipo-veiculo"
		case "tipo-carroceria"
			vFila = "sbq-tipo-carroceria"
		case "faixa-comprimento"
			vFila = "sbq-faixa-comprimento"
		case "espacamento-eixos"
			vFila = "sbq-espacamento-eixos"
		case "vinculo-ordem-carregamento"
			vFila = "sbq-vinculo-ordem-carregamento"
		case "vinculo-portaria"
			vFila = "sbq-vinculo-portaria"
		case "veiculo-frota-safra"
			vFila = "sbq-veiculo-frota-safra"
		case "restricao-veiculo-local"
			vFila = "sbq-restricao-veiculo-local"
		case "vinculo-nota"
			vFila = "sbq-vinculo-nota"
		case "reserva-intencao-logs"
			vFila = "sbq-reserva-intencao-logs"
		case "modalidade-contrato"
			vFila = "sbq-modalidade-contrato"
		case "integracao-tipo-cvc"
			vFila = "sbq-integracao-tipo-cvc"
		elsecase
			vFila = ""
	endselectcase ; Finalização do Switch/Case

	;Chamda de outra Local Proc para complemento da execução
	call plBuscaFilaExecucao(vNrFila, $t_ds_erro$)

	;Condicional if para completar o dado de retorno
	if (vNrFila = 1 & <NOME_DATABASE> = "PRODUÇÃO") ;Produção 
		vNamespace = "sbns-coft-prd"
	elseif (vNrFila = 2) ;Homologação
		vNamespace = "sbns-coft-stg"
	elseif (vNrFila = 3) ;Desenvolvimento
		vNamespace = "sbns-coft-dev"
	endif

	;Tratamemnto de eror das chamadas executadas acima
	if(vFila = "" | vNamespace = "")
		$t_ds_erro$ = "Ocorreu um erro ao obter as credenciais da fila."
		return(<G_ERROEXEC>) ;Retorno de erro da Local Proc
	endIf

	;Tratamento dos resultados para retorno em Struct
	pStcCredencial = $newstruct
	pStcCredencial->namespace = vNamespace
	pStcCredencial->fila = vFila

	return (0) ;Retorna a Local Proc com sucesso
end 

;Local Proc crande com chamad de API externa
entry plEnviaRegistroFila
	params ;Parâmetros de entrada e saída 
		;Tipo parâmetro - NomeParâmetro - Definição de entrada ou saída
		Struct pStcInput		: IN
		Struct pStcOutput		: OUT
		$t_ds_erro$	            : OUT
	endParams

	variables ;Variáveis de utilização da Local Proc
		String	vStrContextoErro, vStrResult, vStrHeader, vStrUrlTemp, vStrUrlFila
		Struct	vStcTemp, vStcToken
	endVariables

 	;Configurações iniciais para tratamentos de erro
	vStrContextoErro	= "(%%$componentname%%%.enviaRegistroFila)"

	;Tratamento de variáveis para inicilização da Local Proc	
	vStcTemp			= ""
	pStcOutput			= ""
	$t_ds_erro$			= ""

	;Validações de dados obrigatórios
	if(pStcInput->dados = "")
		$t_ds_erro$ = "É obrigatório informar um valor para ser enviado para a fila. %%vStrContextoErro%%%"
		return(<G_ERROEXEC>) ;Retorno de erro
	endif

	if(pStcInput->token = "")
		$t_ds_erro$ = "É obrigatório informar o token de acesso ao Azure para enviar o registro para a fila. (%%vStrContextoErro%%%)"
		return(<G_ERROEXEC>)
	endIf

	;Preparação de entradas para chamada de API externa
	vStcTemp->requestMethod	= "POST"
	vStcTemp->timeout	    = 120
	vStcTemp->componentUniface 	= $componentname

	vStrUrlFila = $concat ("https://", pStcInput->sbNamespace, ".servicebus.windows.net/", pStcInput->sbFila,"/messages")
	vStcTemp->url = vStrUrlFila

	vStrHeader = $concat("Authorization: ", pStcInput->token)
	vStrHeader = $concat(vStrHeader, "@", "Content-Type: ", "application/atom+xml;type=entry;charset=utf-8")

	vStcTemp->headerDelimitator	= "@"
	vStcTemp->header			= vStrHeader

	vStcTemp->payload = pStcInput->dados

	;Chamada de operation genérica de outro componente para consumo de API externa
	activate "WSGEW003".consomeRest(	vStcTemp->requestMethod,		    %\
										vStcTemp->url,						%\
										vStcTemp->headerDelimitator,	    %\
										vStcTemp->header,					%\
										vStcTemp->timeout,				    %\
										"true",								%\
										vStcTemp->componentUniface,	        %\
										"",									%\
										vStcTemp->payload,  	      		%\
										vStcTemp->inicio,					%\
										vStcTemp->fim,						%\
										vStcTemp->responseCode,		        %\
										vStcTemp->headerResponse,		    %\
										vStcTemp->restResponse               )
	;Tratamento de erros
	if ($status < 0)
		if ($status != <g_erroexec>)
			call pl_erro_cmdmsg($procerrorcontext)
		else
			$t_ds_erro$ = "%%$t_ds_erro$%%% %%vStrContextoErro%%%"
		endIf
		return(<g_erroexec>) ; Retorno de erro
	endIf

	;Tratamento de retorno e HTTP response code da API
	if ($number(vStcTemp->responseCode) != 201)
		$t_ds_erro$ = vStcTemp->restResponse
		return (<G_ERROEXEC>)
	endif

	;Tratamento de retorno da execução de chamada
	pStcOutPut->retorno	= "Registro criado com sucesso na fila."

	;Tratamento dos parâmetros para retorno
	vStrContextoErro	= ""
	vStcTemp		    = ""
	$t_ds_erro$			= ""

	return(0) ;Retorno da Local Proc com sucesso

end

;Local Proc com chamda de operation em outro componente
entry plVerificaSequencia
	params ;Parâmetros de entrada e saída 
		;Tipo parâmetro - NomeParâmetro - Definição de entrada ou saída
		string  pChaveNumSeq		: IN
		numeric pTpIntegracao       : OUT  ;1 - LIGADO, 2 - DESLIGADO
		        $t_ds_erro$         : OUT
	endparams
	variables
		string vDsContexto, vLsParametros, vNrLancamento
		numeric v_tp_parecer
	endvariables
	
	;Configurações iniciais para tratamentos de erro
	vDsContexto = "<$componentname>.plVerificaRotaIntegracao"

	;Tratamento de lista para entrada em operation 
	putitem/id vLsParametros, "tp_sequencia", pChaveNumSeq

	;Chamada de opration em outro componente
	activate "GSISO037".OBTEM_FIELD_PK_SERRO("GSIS_NUMSEQ", vLsParametros, "nr_lancamento", "", vNrLancamento, $t_ds_erro$)
	;Tratamento de erro
	if ($status < 0)
		$t_ds_erro$ = "%%$t_ds_erro$%%% - (%%vDsContexto)"
		return <g_erroexec> ;Retorno de Erro
	endif 

	;Tratamento de valores para retorno
	if(vNrLancamento > 2 | vNrLancamento < 1)
		$t_ds_erro$ = "Valor inválido para a chave de ativação. - (%%vDsContexto)"
		return <g_erroexec>
	else
		pTpIntegracao = vNrLancamento
	endif

	return (0) ;Retorno com sucesso da Local Proc
end

;Local Proc com processamento de datas
entry plDiasMes
	params ;Parâmetros de entrada e saída 
		;Tipo parâmetro - NomeParâmetro - Definição de entrada ou saída
		Numeric p_dt_anomes    : in
		Date p_dt_inicio        : in
		Date p_dt_fim        : in
		Numeric p_qt_dia_mes    : out
		Numeric p_qt_dia_per    : out
	endParams
	variables
		Date v_dt_fim
	endVariables
	
	;Aplicação de regra nos valores
	p_qt_dia_per = (p_dt_fim - p_dt_inicio) + 1
	
	;Condicional para verificação da regra
	if(p_dt_anomes = 201605)
		v_dt_fim = $datim("01/%%p_dt_anomes[5,6]%%%/%%p_dt_anomes[1,4]%%%") ;Cria data com os valores do paramentro de input
		addMonths 1, v_dt_fim ;Adiciona mes na data
		v_dt_fim = $result - 1d
		p_qt_dia_mes = v_dt_fim[D]
	else
		p_qt_dia_mes = p_qt_dia_per
	endIf
	
	return(0) ;Retorna Local Proc com sucesso
end

;Local Proc com tratamento de listas
entry plValidaCelular 
	params ;Parâmetros de entrada e saída 
		;Tipo parâmetro - NomeParâmetro - Definição de entrada ou saída
		Numeric p_cd_ddd    : in
		Numeric p_nr_fone    : in
	endparams
	variables
		string v_ds_contexto, v_ls_input, v_ls_output
		Boolean v_in_dddvalido, v_in_fonevalido
	endvariables

	;Configurações iniciais para tratamentos de erro
	v_ds_Contexto = "<$componentname>.pl_vld_celular"

	;Tratamento da lista para entrada dos valores
	v_ls_input  = ""
	v_ls_output = ""	
	putitem/id v_ls_input, "TP_TELEFONE", 3
	putitem/id v_ls_input, "CD_DDD", p_cd_ddd
	putitem/id v_ls_input, "NR_FONE", p_nr_fone	

	;Chamada da operation com valores de lista no parâmetro de entrada
	activate "gpeso059".valida_telefone(v_ls_input, v_ls_output, $t_ds_erro$)
	if ($status < 0) ;Tratamento dos erros
		if ($status != <g_erroexec>)
			call pl_erro_cmdmsg($procerrorcontext)
		endif
		$t_ds_erro$ = "%%$t_ds_erro$%%% (%%v_ds_contexto%%%)"
		return(<g_erroexec>) ;Retorno do erro
	endif

	;Obtenção de valores da lista de retorno da operation chamada
	v_in_dddvalido = $item("in_ddd_valido", v_ls_output)
	v_in_fonevalido = $item("in_fone_valido", v_ls_output)

	;Condicional para verificação da regra e tratativa do retorno
	if (!v_in_dddvalido | !v_in_fonevalido)
		$t_ds_erro$ = "%%$t_ds_erro$%%% (%%v_ds_contexto%%%)"
		return(<G_ERROEXEC>) ;Retorno com erro
	endif

	;Retorno com sucesso
	return(0)
end
