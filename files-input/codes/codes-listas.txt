
;Coloca itens em lista sem identificador
operation criaListaSemIdentificador
    params ;Parâmetros de entrada e saída 
		;Tipo parâmetro - NomeParâmetro - Definição de entrada ou saída
        string pDsPrimeiroNome    : IN   
		string pDsSegundoNome     : IN    
		string pDsTerceiroNome    : IN    
		string pDsQuartoNome      : IN      
        string  pDsResultado      : OUT 
        $t_ds_erro$ : OUT
    endparams

	;Cria lista vazia
	pDsResultado = ""

	;Atribui valores
	putitem pDsResultado, -1 , pDsPrimeiroNome
	putitem pDsResultado, -1 , pDsSegundoNome
	putitem pDsResultado, -1 , pDsTerceiroNome
	putitem pDsResultado, -1 , pDsQuartoNome


	return (0) ;Retorna operação com sucesso

end

;Coloca itens em lista com identificador
operation criaListaComIdentificador
    params ;Parâmetros de entrada e saída 
		;Tipo parâmetro - NomeParâmetro - Definição de entrada ou saída
        string pDsPrimeiroNome    : IN   
		string pDsSegundoNome     : IN    
		string pDsTerceiroNome    : IN    
		string pDsQuartoNome      : IN      
        string  pDsResultado      : OUT 
        $t_ds_erro$ : OUT
    endparams

	;Cria lista vazia
	pDsResultado = ""

	;Atribui valores a lista
	putitem/id pDsResultado, "1" , pDsPrimeiroNome
	putitem/id pDsResultado, "2" , pDsSegundoNome
	putitem/id pDsResultado, "3" , pDsTerceiroNome
	putitem/id pDsResultado, "4" , pDsQuartoNome


	return (0) ;Retorna operação com sucesso

end


;Processa itens de lista
operation processaListaCidades
    params ;Parâmetros de entrada e saída 
		;Tipo parâmetro - NomeParâmetro - Definição de entrada ou saída
        $t_ds_erro$         : OUT
    endparams

    variables
        string vLista
        string vIdItem
        string vValorItem
        string vIndice
        string vResultado
    endvariables

    vLista = "A=Atenas;R=Roma;Sy=Siracusa;P=Pompéia;Sp=Esparta"
    vResultado = ""

	;For em lista com identificador
    forlist/id vIdItem, vValorItem, vIndice in vLista 
		putmess "Processando item %%vIndice%% - Id: %%vIdItem%%%, Valor: %%vValorItem%%%" ;Envia mensagem de processamento
    endfor

    return(0) ;Retorno com sucesso
end


;Retorna item de lista pelo identificador
operation retornaItemIdentificado
    params ;Parâmetros de entrada e saída 
		;Tipo parâmetro - NomeParâmetro - Definição de entrada ou saída
		string pNrIdentificador    : IN  
		string pDsValor            : OUT  
        $t_ds_erro$                : OUT
    endparams

    vLista = "A=Atenas;R=Roma;Sy=Siracusa;P=Pompéia;Sp=Esparta"

	;Obtem o valor da lista com o identificador
    pDsValor = $item(pNrIdentificador,vLista)

    return(0) ;Retorno com sucesso
end


;Retorna item de lista pelo identificador
operation retornaItemIdentificado
    params ;Parâmetros de entrada e saída 
		;Tipo parâmetro - NomeParâmetro - Definição de entrada ou saída
		string pNrIdentificador    : IN  
		string pDsValor            : OUT  
        $t_ds_erro$                : OUT
    endparams

    vLista = "A=Atenas;R=Roma;Sy=Siracusa;P=Pompéia;Sp=Esparta"

	;Obtem o valor da lista com o identificador
    getItem/id pDsValor, vLista, pNrIdentificador

    return(0) ;Retorno com sucesso
end


;Retorna item de lista sem identificador
operation retornaItemNaoIdentificado
    params ;Parâmetros de entrada e saída 
		;Tipo parâmetro - NomeParâmetro - Definição de entrada ou saída
		string pNrPosicao          : IN  
		string pDsValor            : OUT  
        $t_ds_erro$                : OUT
    endparams

    vLista = "A=Atenas;R=Roma;Sy=Siracusa;P=Pompéia;Sp=Esparta"

	;Obtem o valor da lista com a posição desejada
    getItem pDsValor, vLista, pNrPosicao

    return(0) ;Retorno com sucesso
end

;Operação de repetição com lista
operation consultaOrdensProducao
	params ;Parâmetros de entrada e saída 
		;Tipo parâmetro - NomeParâmetro - Definição de entrada ou saída
		$t_cd_operador$  : in  
		string pLsInput  : in
		string pLsOutput : out
		$t_ds_erro$ : out
	endparams
	variables
		string vDsContexto, vLsParams, vLsInput, vLsOutput, vLsOccMovtoOrdem
		datetime vDtFim
	endvariables
	
	;Inicialização de variáveis para tratamento de erros
	vDsContexto = "%%^%%%(<$componentname>.ConsultaTela\ConsultaOrdensProd)"
	
	;While enquanto a variável da lista contiver algum valor
	while (pLsInput != "")
		getitem vLsOccMovtoOrdem, pLsInput, 1 ;Obtem registro prosicionado em primeiro

		;Valida preenchimetno dos dados
		if (cd_plantaprod.dummy = "")
			;Atribui dados a campos
			cd_plantaprod.dummy = $item("cd_plantaprod", vLsOccMovtoOrdem)
			validatefield cd_plantaprod.dummy
			id_pontoprod.dummy  = $item("id_pontoprod", vLsOccMovtoOrdem)
			validatefield id_pontoprod.dummy
			id_procprod.dummy   = $item("id_procprod", vLsOccMovtoOrdem)
			validatefield id_procprod.dummy
			cd_modulo.dummy     = $item("cd_modulo", vLsOccMovtoOrdem)
			cd_produto.dummy    = $item("cd_produto", vLsOccMovtoOrdem)
			validatefield cd_produto.dummy
		endif	
		
		;VAlida se não é um registor vazio
		if (!$empty("cind_movtordem_v"))
			;Cria mais um registro na entidade abaixo do existente
			creocc "cind_movtordem_v", -1
		endif
	
		;Obtem os registros
		getlistitems/occ vLsOccMovtoOrdem, "cind_movtordem_v"

		;Realiza consulta na entidade
		retrieve/a "cind_movtordem_v"
			
		;Deleta o primeiro registro da lista, posicionando para o próximo da execução
		delitem pLsInput, 1
	endwhile 
	
	;Chama Local Proc para processamento de interface
	call plInterfaceCampos

	return(0);Retorna com sucesso
end

;Local Proc com criação de lista
entry plValidaCelular 
	params ;Parâmetros de entrada e saída 
		;Tipo parâmetro - NomeParâmetro - Definição de entrada ou saída
		Numeric p_cd_ddd    : in
		Numeric p_nr_fone    : in
	endparams
	variables
		string v_ds_contexto, v_ls_input, v_ls_output
		Boolean v_in_dddvalido, v_in_fonevalido
	endvariables

	;Configurações iniciais para tratamentos de erro
	v_ds_Contexto = "<$componentname>.pl_vld_celular"

	;Tratamento da lista para entrada dos valores
	v_ls_input  = ""
	v_ls_output = ""	
	putitem/id v_ls_input, "TP_TELEFONE", 3
	putitem/id v_ls_input, "CD_DDD", p_cd_ddd
	putitem/id v_ls_input, "NR_FONE", p_nr_fone	

	;Chamada da operation com valores de lista no parâmetro de entrada
	activate "gpeso059".valida_telefone(v_ls_input, v_ls_output, $t_ds_erro$)
	if ($status < 0) ;Tratamento dos erros
		if ($status != <g_erroexec>)
			call pl_erro_cmdmsg($procerrorcontext)
		endif
		$t_ds_erro$ = "%%$t_ds_erro$%%% (%%v_ds_contexto%%%)"
		return(<g_erroexec>) ;Retorno do erro
	endif

	;Obtenção de valores da lista de retorno da operation chamada
	v_in_dddvalido = $item("in_ddd_valido", v_ls_output)
	v_in_fonevalido = $item("in_fone_valido", v_ls_output)

	;Condicional para verificação da regra e tratativa do retorno
	if (!v_in_dddvalido | !v_in_fonevalido)
		$t_ds_erro$ = "%%$t_ds_erro$%%% (%%v_ds_contexto%%%)"
		return(<G_ERROEXEC>) ;Retorno com erro
	endif

	;Retorno com sucesso
	return(0)
end

;Local Proc com tratamento de listas
entry plValidaCelular 
	params ;Parâmetros de entrada e saída 
		;Tipo parâmetro - NomeParâmetro - Definição de entrada ou saída
		Numeric p_cd_ddd    : in
		Numeric p_nr_fone    : in
	endparams
	variables
		string v_ds_contexto, v_ls_input, v_ls_output
		Boolean v_in_dddvalido, v_in_fonevalido
	endvariables

	;Configurações iniciais para tratamentos de erro
	v_ds_Contexto = "&lt;$componentname&gt;.pl_vld_celular"

	;Tratamento da lista para entrada dos valores
	v_ls_input  = ""
	v_ls_output = ""	
	putitem/id v_ls_input, "TP_TELEFONE", 3
	putitem/id v_ls_input, "CD_DDD", p_cd_ddd
	putitem/id v_ls_input, "NR_FONE", p_nr_fone	

	;Chamada da operation com valores de lista no parâmetro de entrada
	activate "gpeso059".valida_telefone(v_ls_input, v_ls_output, $t_ds_erro$)
	if ($status &lt; 0) ;Tratamento dos erros
		if ($status != &lt;g_erroexec&gt;)
			call pl_erro_cmdmsg($procerrorcontext)
		endif
		$t_ds_erro$ = "%%$t_ds_erro$%%% (%%v_ds_contexto%%%)"
		return(&lt;g_erroexec&gt;) ;Retorno do erro
	endif

	;Obtenção de valores da lista de retorno da operation chamada
	v_in_dddvalido = $item("in_ddd_valido", v_ls_output)
	v_in_fonevalido = $item("in_fone_valido", v_ls_output)

	;Condicional para verificação da regra e tratativa do retorno
	if (!v_in_dddvalido | !v_in_fonevalido)
		$t_ds_erro$ = "%%$t_ds_erro$%%% (%%v_ds_contexto%%%)"
		return(&lt;G_ERROEXEC&gt;) ;Retorno com erro
	endif

	;Retorno com sucesso
	return(0)
end

;For em entidade juntamente com for com lista
Entry plProcessarReservaAlimentos
	params ;Parâmetros de entrada e saída 
	;Tipo parâmetro - NomeParâmetro - Definição de entrada ou saída
		string p_ls_input		: IN
		string p_ls_output	: OUT
		       $t_ds_erro$  : OUT
	endparams	
	Variables
		Date v_dt_processo
		String v_ls_resordcarr, v_occ_resordcarr
		Handle v_instancia_CFREO047
		Struct v_stc_input, v_stc_output, v_stc_ofertas, v_stc_ofertaspend, v_stc_oferta
		Numeric v_nr_pos
		Time v_hr_expiracao, v_hr_processamento
	EndVariables

	;Inicializa vairiáveis da função
	v_dt_processo = $date
	v_hr_expiracao   = $item("hr_expiracao", p_ls_input)
	v_hr_processamento = $clock

	;Cria nova instância para chamda de operation em outro componente
	newinstance "CFREO047", v_instancia_CFREO047, "Transaction=TRUE"

	;Inicializa variáveis 
	$t_tp_operador$   = 1
	$t_cd_operador$   = 1
	v_stc_ofertas     = $newstruct
	v_stc_ofertaspend = $newstruct

	;Realiza consulta ao banco de dados
	clear/e "ctra_resordcarr"
	dt_embarque.ctra_resordcarr = "%%v_dt_processo"
	st_reserva.ctra_resordcarr  = "2" ; Reservado
	tp_segcarga.ctra_resordcarr = "1" ;alimentos
	retrieve/e "ctra_resordcarr"

	;Tratamento de erros da consulta
	if ($status < 0 & $status != -2)
		deleteinstance v_instancia_CFREO047
		$t_ds_erro$ = "Falha ao ler dados da entidade CTRA_RESORDCARR com status %%$status"
		return (<G_ERROEXEC>)
	endif

	;Tratamento de erros para retorno vazio da consulta
	if ($status = -2)
		deleteinstance v_instancia_CFREO047
		clear/e "ctra_resordcarr"	
		return (0)
	endif

	Posiciona registro na primeira ocorrencia encontrata da entidade consultada
	setocc "ctra_resordcarr", -1
	sort "ctra_resordcarr", "dt_trscria.ctra_resordcarr" ; Ordena registros pela data de criação, em ordme crescente

	;For em entidade consultada para processar registro a registro
	forentity "ctra_resordcarr"

		;Atribui dados da entidade a uma lista
		v_occ_resordcarr = ""
		putitem/id v_occ_resordcarr, "id_motorista", id_motorista.ctra_resordcarr
		putitem/id v_occ_resordcarr, "nr_versaoveic", nr_versaoveic.ctra_resordcarr
		putitem/id v_occ_resordcarr, "nr_ofertafrt", nr_ofertafrt.ctra_resordcarr
		putitem/id v_occ_resordcarr, "cd_transp", cd_transp.ctra_resordcarr
		putitem v_ls_resordcarr, -1, v_occ_resordcarr

	endfor

	;Limpa entidade consultada
	clear/e "ctra_resordcarr"

	;For em lista criada com os dados dos registros consultados
	forlist v_occ_resordcarr in v_ls_resordcarr

		;Atribui dados a uma struct
		v_stc_input                = $newstruct
		v_stc_input->id_motorista  = $item("id_motorista", v_occ_resordcarr)
		v_stc_input->nr_versaoveic = $item("nr_versaoveic", v_occ_resordcarr)
		v_stc_input->nr_ofertafrt  = $item("nr_ofertafrt", v_occ_resordcarr)
		v_stc_input->tp_operador   = $t_tp_operador$
		v_stc_input->cd_operador   = $t_cd_operador$
		v_stc_input->in_commit     = <G_TRUE>

		;Realiza chamada a uma operation em outro componente chamando pela nova instancia criada acima
		v_instancia_CFREO047->atualizarOferta(v_stc_input, v_stc_output, $t_ds_erro$)
		if ($status < 0) ;Tratamento de erros
			if ($status != <G_ERROEXEC>)
				call PL_ERRO_CMDMSG ($procerrorcontext)
			endif			
		else ;Caso não tenha erro nenhum processa os dados
			if (v_stc_output->oferta->st_oferta = 6) ; Confirmada
				v_stc_oferta            = v_stc_output->oferta
				v_stc_oferta->cd_transp = $item("cd_transp", v_occ_resordcarr)
				v_stc_ofertas->*{-1}    = v_stc_oferta
			elseif (v_stc_output->oferta->st_oferta = 1) ; Pendente
				v_stc_oferta             = v_stc_output->oferta
				v_stc_oferta->cd_transp  = $item("cd_transp", v_occ_resordcarr)
				v_stc_ofertaspend->*{-1} = v_stc_oferta
			endif
		endif
	endfor

	;Percorre registros atualizados na struct criada, utilizando um while 
	v_nr_pos     = 1
	v_stc_oferta = v_stc_ofertas->*{v_nr_pos}
	while (v_stc_oferta->$membercount > 0)

		;Chama local proc para processar registro da struct
		call PL_PROCESSAR_ITEMRES_ALIMENTOS(v_stc_oferta, v_dt_processo, v_hr_expiracao, v_hr_processamento)
		;#include LIB_COAMO:G_VLD_ACTIVATE ; Validação de erro com biblioteca 
		if ($status < 0)
			if ($status != <G_erroexec>)
				call pl_erro_cmdmsg($procerrorcontext)
			endif			
			deleteinstance v_instancia_CFREO047
			return(<G_erroexec>)
		endif
		v_nr_pos     = v_nr_pos + 1
		v_stc_oferta = v_stc_ofertas->*{v_nr_pos}
	endwhile	

	;Deleta instância criada anteriormente
	deleteinstance v_instancia_CFREO047
	 
	return (0) ; Retorna com sucesso
end