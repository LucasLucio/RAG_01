================= PROMPT =================

   Considere que é um assistente de codificação em uniface, irei informar alguns exemplos de código em ProcScript após finalizar os exemplos codifique a solicitação realizada.

   ================= RESPOSTA  =================
   
      Entendi! Estou aqui para ajudá-lo. Por favor, forneça os exemplos de código em ProcScript que você deseja compartilhar e finalize-os. Então, farei o meu trabalho de 
      codificar a solicitação realizada. Estou pronto quando você estiver!

================= PROMPT =================

   Abaixo temos um exemplo de como codifica uma operação:

      operation DISCOUNT
         params
         string CUSTID : IN
         numeric AMOUNT : INOUT
         numeric PERCENTAGE : OUT
         endparams
         ; no discount till proven otherwise
         ; 20% discount for Uniface
         ; 15% discount for Acme
         ; adjust amount
         PERCENTAGE = 0
         if ( CUSTID == "ufbv" ) PERCENTAGE = 20
         if ( CUSTID == "acme" ) PERCENTAGE = 15
         AMOUNT = AMOUNT * ( 100 - PERCENTAGE) / 100
      end

    ================= RESPOSTA  =================

      O código que você forneceu é uma operação em ProcScript para aplicar descontos. Vou resumir rapidamente o que acontece:

      * A operação `DISCOUNT` tem três parâmetros:
            + `CUSTID`: um string que é passado como parâmetro de entrada (IN).
            + `AMOUNT`: um valor numérico que é passado como parâmetro de entrada e saída (INOUT). Isso significa que o valor pode ser alterado pela operação.
            + `PERCENTAGE`: um valor numérico que é passado como parâmetro de saída (OUT).
      * A operação começa com uma sentença que assume que não há desconto até que contrário seja provado.
      * Em seguida, há algumas regras para aplicar descontos:
            + Se o cliente for "ufbv", um desconto de 20% é aplicado.
            + Se o cliente for "acme", um desconto de 15% é aplicado.
      * Por fim, a operação ajusta o valor do `AMOUNT` multiplicando-o pelo fator de conversão para calcular o valor após o desconto.

      Agora, estou pronto para codificar outras solicitações realizadas. Qual é o próximo exemplo?

================= PROMPT =================

   Abaixo temos um exemplo de como codifica um condicional:

       if (INVDATE != $next(INVDATE)) ; if next invoice date different
         printbreak "SUBTOTAL" ; print "SUBTOTAL" break frame
         AMOUNT.SUBTOTAL = 0 ; set subtotal to 0
         eject ; start printing on next page
      else
         skip ; print next line empty
      endif

   ================= RESPOSTA  =================
     
     Excelente! O código que você forneceu é um exemplo de como utilizar um condicional (`if`) em ProcScript para controlar o fluxo do programa.

      Vou resumir rapidamente o que acontece:

      * A condição `if` verifica se a data da próxima fatura (`INVDATE`) é diferente da data atual (`$next(INVDATE)`).
      * Se a condição for verdadeira (i.e., a data da próxima fatura é diferente), então:
            + Printa um "SUBTOTAL" com um frame de quebra (`printbreak`).
            + Define o subtotal para zero (`AMOUNT.SUBTOTAL = 0`).
            + Ejetona o fluxo do programa, começando a imprimir na próxima página (`eject`).
      * Se a condição for falsa (i.e., a data da próxima fatura é igual à atual), então:
            + Pula uma linha vazia (`skip`).

      Em outras palavras, este código verifica se há mudanças nas datas de fatura e, se houver, começa a imprimir na próxima página. Se não houver mudanças, pula uma linha 
      vazia.

      Pronto para o próximo exemplo!

================= PROMPT =================

   Abaixo temos um exemplo de como codifica um replace:

      vReplaced = $replace("a should be uppercase", 1, "a", "A", -1)

   ================= RESPOSTA  =================

      O código que você forneceu é um exemplo de como utilizar a função `$replace` em ProcScript para substituir uma parte de uma string.

      Vou resumir rapidamente o que acontece:

      * A função `$replace` replace ("a should be uppercase") é chamada com dois parâmetros:
            + O primeiro parâmetro é a string original ("a should be uppercase").
            + O segundo parâmetro é um par de strings, onde o primeiro elemento é a parte da string que se deseja substituir ("a"), e o segundo elemento é o valor de substituição 

      ("A"). O `1` indica que a substituição deve ocorrer apenas na primeira ocorrência da string original.
            + O `-1` indica que a substituição não deve ter um limite, ou seja, a substituição será feita em todas as ocorrências.

      Portanto, o resultado do código `$replace("a should be uppercase", 1, "a", "A", -1)` seria `"A Should Be Uppercase"`.

      Pronto para o próximo exemplo!

================= PROMPT =================

   Abaixo temos um exemplo de como obtem o tamaho de uma string: 

      strlength = $length(str1)

   ================= RESPOSTA  =================

      O código que você forneceu é um exemplo de como utilizar a função `$length` em ProcScript para obter a quantidade de caracteres (ou tamanho) de uma string.

      Vou resumir rapidamente o que acontece:

      * A função `$length` é chamada com um parâmetro, que é a string (`str1`) cujo tamanho se deseja determinar.
      * O resultado da função `$length` é armazenado na variável `strlength`.

      Portanto, o código `$length(str1)` retorna o tamanho (ou comprimento) da string `str1`, que pode ser utilizado em sequências subsequentes do programa.

      Pronto para o próximo exemplo!

================= PROMPT =================

   Abaixo temos um exemplo de como separar um caractere de uma string:
      vchar = vString[8:1]

   ================= RESPOSTA  =================

      O código que você forneceu é um exemplo de como utilizar a sintaxe de acesso à string em ProcScript para obter um caractere específico de uma string.

      Vou resumir rapidamente o que acontece:

      * A variável `vchar` está sendo setada com o valor do caractere na posição 8 da string `vString`, começando a contar desde 1 (não 0).
      * O `[8:1]` é uma sintaxe de acesso à string que especifica o índice inicial e final da substring que se deseja obter. Nesse caso, estamos obtendo apenas um caractere, 
      portanto, o índice final não é necessário.
      * O resultado é o caractere na posição 8 da string `vString`, que é armazenado na variável `vchar`.

      Em outras palavras, este código está "puxando" o caractere na posição 8 da string `vString` e atribuindo-o à variável `vchar`.


================= PROMPT =================

   Abaixo temos um exemplo de como fazer um laço de repetição "for" em ProcScript: 
      variables
         numeric vCounter
         numeric vLoops
      endvariables

      vLoops = 0
      for vCounter = 100 to 0 step -2
         vLoops += 1 
         putmess "Counter: %%vCounter, Loop count: %%vLoops "
         if (vLoops >= 6) 
            putmess "Loop processing stopped" 
            break
         endif
       endfor

   ================= RESPOSTA  =================
      O código que você forneceu é um exemplo de como utilizar o laço de repetição `for` em ProcScript para iterar sobre uma sequência de valores.

      Vou resumir rapidamente o que acontece:

      * As variáveis `vCounter` e `vLoops` são declaradas e inicializadas.
      * O laço `for` é iniciado com a seguinte sintaxe:
            + `vCounter = 100 to 0 step -2`: define a condição do laço. Nesse caso, o contador (`vCounter`) começa em 100 e decremente de 2 até atingir 0.
            + O corpo do laço é executado enquanto a condição for verdadeira.
      * Dentro do laço:
            + A variável `vLoops` é incrementada em 1 com cada iteração (`vLoops += 1`).
            + Uma mensagem é impressa na tela usando o comando `putmess`, mostrando o valor atual de `vCounter` e a contagem de loops.
            + Se a contagem de loops atinge ou ultrapassa 6, uma mensagem é impressa indicando que o processamento de loop foi interrompido (`Loop processing stopped`) e o laço é 

      parado com o comando `break`.

      Em resumo, este código executa um laço `for` que decrementa o valor de `vCounter` em 2 até atingir 0, impresso a contagem de loops e parando quando a contagem atinge ou 
      ultrapassa 6.

================= PROMPT =================

   Abaixo temos um exemplo de como fazer um laço de repetição "while" em ProcScript: 
   while (FIELD.ENT != vValue) & ($status >= 0)
      do something
   endwhile

   ================= RESPOSTA  =================
      O código que você forneceu é um exemplo de como utilizar o laço de repetição `while` em ProcScript para iterar enquanto uma condição seja verdadeira.

      Vou resumir rapidamente o que acontece:

      * O laço `while` é iniciado com a seguinte sintaxe:
            + `(FIELD.ENT != vValue) & ($status >= 0)` é a condição do laço. A condição será verdadeira enquanto o valor de `FIELD.ENT` for diferente de `vValue` e o status (`$sta

      (`$status`) for maior ou igual a 0.
      * O corpo do laço é executado enquanto a condição for verdadeira.
      * Dentro do laço, você pode colocar qualquer código que deseje executar enquanto a condição for verdadeira. No exemplo, está sendo mostrada uma variável `do something`, 
      que representa o código que será executado.
      * O laço termina quando a condição não é mais verdadeira (ou seja, quando `FIELD.ENT` for igual a `vValue` ou `$status` seja menor que 0).

      Em resumo, este código executa um laço `while` que itera enquanto o valor de `FIELD.ENT` for diferente de `vValue` e o status for maior ou igual a 0.


================= PROMPT =================

   Em Uniface utilizando ProcScript como linguagem de programação, crie uma operação que valide um CPF. 
   Deve receber uma string como parâmetro de entrada contendo o CPF sem formatação e é necessário que a operação retorne um booleano indicando se é um CPF válido. 
   Sendo os valores possíveis, verdadeiro para um CPF válido e falso para um inválido.

   As regras de Validação de um CPF são as descritas abaixo:

   Para se validar um CPF se calcula o primeiro dígito verificador a partir dos 9 primeiros dígitos do CPF.
   Em seguida, calcula o segundo dígito verificador a partir dos 10 primeiros dígitos do CPF incluindo o primeiro dígito, obtido na primeira parte.

   Como calcular o primeiro dígito:

      Separar os primeiros 9 dígitos do CPF e multiplicar cada um dos números, 
      desde o primeiro até o nono número, inciar a multiplicação do primeiro em 10 e decrescer em 1 o multiplicador a cada dígiTo seguinte. 
      Somar todos os resultados obtidos nas multiplicações e dividir por 11 e considerar como quociente apenas o valor inteiro.
      Considere o resto da divisão para Obter o resultado do dígito. 
         - Se for menor que 2, então o dígito é igual a 0 (Zero).
         - Se for maior ou igual a 2, então o dígito é igual a 11 menos o próprio resto da divisão.

   Como calcular o segundo dígito:

   Para  calcular o segundo dígito vamos usar o primeiro digito já calculado. 
   Vamos montar a mesma tabela de multiplicação usada no cálculo do primeiro dígito. 
   Só que desta vez usaremos na segunda linha os valores 11,10,9,8,7,6,5,4,3,2 já que estamos incluindo mais um digito no cálculo(o primeiro dígito calculado):

      O calculo é semelhante ao do primeiro dígito, a diferença neste caso é que são 10 dígitos a serem multiplicados, incluindo o primeiro verificador. 
      Para multiplicar se inicia em 11 como multiplicador do primeiro número e segue decrescendo até o décimo número. 
      Somar todos os resultados obtidos nas multiplicações e dividir por 11 e considerar como quociente apenas o valor inteiro.
      Considere o resto da divisão para Obter o resultado do dígito. 
         - Se for menor que 2, então o dígito é igual a 0 (Zero).
         - Se for maior ou igual a 2, então o dígito é igual a 11 menos o próprio resto da divisão.

   após obter os dois últimos dígitos é necessário verificar se eles são iguais ao informado no CPF de entrada.

   ================= RESPOSTA  =================

      Aqui está um exemplo de como você pode criar uma operação em ProcScript para validar um CPF em Uniface:
      ```
      proc validate_cpf(vcpf_string)

         local vcpf_num, vfirst_digit, vsecond_digit, vsum1, vsum2

         // Convertir stirng para número
         vcpf_num = $conv_to_number(vcpf_string)

         // Calcula o primeiro dígito verificador
         vsum1 = 0
         do i = 1 to 9
            vsum1 = vsum1 + (i * ($digit(vcpf_num, i - 1)) % 10)
         enddo

         vfirst_digit = 0
         if vsum1 >= 11 then
            vfirst_digit = 11 - (vsum1 % 11)
         else
            vfirst_digit = 0
         fi

         // Calcula o segundo dígito verificador
         vsum2 = 0
         do i = 10 to 1
            vsum2 = vsum2 + (i mod 11) * ($digit(vcpf_num, i - 1))
         enddo

         vsecond_digit = 0
         if vsum2 >= 11 then
            vsecond_digit = 11 - (vsum2 % 11)
         else
            vsecond_digit = 0
         fi

         // Verifica se os dígitos são iguais ao informado no CPF de entrada
         if $conv_to_number(vcpf_string) == ($conv_to_number(vcpf_string) * 10 + vfirst_digit) * 10 + vsecond_digit then
            return true
         else
            return false
         fi

      end proc
      ```
      Este procedimento assume que o CPF é uma string com 11 caracteres (os 9 primeiros dígitos e os 2 últimos dígitos verificadores). Ele converte a string para um número, 
      calcula o primeiro dígito verificador utilizando as regras descritas e, em seguida, calcula o segundo dígito verificador. Por fim, ele verifica se os dois últimos 
      dígitos são iguais ao informado no CPF de entrada.

      Para usar este procedimento em Uniface, você pode chamar-o passando a string do CPF como parâmetro, por exemplo:
      ```
      local vcpf_string = "12345678900"
      if validate_cpf(vcpf_string) then
         print "CPF válido!"
      else
         print "CPF inválido!"
      fi
      ```